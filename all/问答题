4.1 7 描述符特权级DPL、当前特权级CPL和请求特权级RPL的含义是什么？在哪些寄存器中这些字段？对应的访问条件是什么？ (challenge)写出一些简单的小程序（c or asm）来体现这些特权级的区别和联系。

DPL是存在于段描述符中的特权级，是固定的，规定访问该段的权限级别(Descriptor Privilege Level)
CPL是存在于CS（代码段寄存器）中，表示当前执行代码的特权级的描述标志(Current Privilege Level)
RPL是存在于每一个段选择子中，说明的是进程对段访问的请求权限(Request Privilege Level)，是对于段选择子而言的，每个段选择子有自己的RPL，它说明的是进程对段访问的请求权限。
对数据段和堆栈段访问时的特权级控制：要求max (CPL, RPL)<=DPL
对代码段访问的特权级控制：
（1）所有的程序转跳，CPU都不会把段选择子的RPL赋给转跳后程序的CS.RPL
（2)转跳后程序的CPL(CS.RPL)只会有下面的两种可能：
    转跳后程序的CPL(CS.RPL)=转跳前程序的CPL(CS.RPL)
    转跳后程序的CPL(CS.RPL)=转跳后程序的CodeDescriptor.DPL
以call为例
(1)如果能成功转跳到一致代码段, 转跳后程序的CPL(CS.RPL)=转跳前程序的CPL(CS.RPL)，(转跳后程序的CPL继承了转跳前程序的CPL)
(2)如果能成功转跳到非一致代码段, 转跳后程序的CPL(CS．RPL)＝转跳后程序的Descriptor.DPL

4.2 5比较不同特权级的中断切换时的堆栈变化差别；(challenge)写出一些简单的小程序（c or asm）来显示出不同特权级的的中断切换的堆栈变化情况。
（1）中断保存过程
内核态产生中断时栈还是同一个栈，没有发生变化，只是在这个栈上面压了一些寄存器内容--Error code、EIP和CS、EFLAGS；
用户态产生中断用的是不同的栈，当由于特权级变化产生了中断的时候，除了压上述的内容还有两个重要的信息ESP和SS；
（2）中断恢复过程
内核态产生的中断依然恢复到内核态，使用同一个堆栈，执行iret指令返回时，将Error Code弹出，根据CS和EIP跳转到被打断的地方继续执行，恢复EFLAGS。
用户态产生的中断将从内核态恢复到用户态，切换回用户态的堆栈，执行iret指令返回时，除了弹出上述内容以外，还要弹出SS和ESP。
